name: deploy to ec2
on:
    push:
        branches:
            - main
        paths:
            - result/**
            - vote/**
            - worker/**
            - .github/workflows/deploy-to-ec2.yml
            - docker-compose.yaml
jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v2
            
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: login to dockerhub 
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push vote service
              uses: docker/build-push-action@v4
              with:
                context: ./vote
                file: ./vote/Dockerfile
                push: true
                tags: ${{ secrets.DOCKERHUB_USERNAME }}/deployvote:latest
                

            - name: Build and push result service
              uses: docker/build-push-action@v4
              with:
                context: ./result
                file: ./result/Dockerfile
                push: true
                tags: ${{ secrets.DOCKERHUB_USERNAME }}/deployresult:latest

            - name: Build and push worker service
              uses: docker/build-push-action@v4
              with:
                context: ./worker
                file: ./worker/Dockerfile
                push: true
                tags: ${{ secrets.DOCKERHUB_USERNAME }}/deployworker:latest
                
    build_to_ECR:
       name: Build and Push to ECR
       runs-on: ubuntu-latest
       steps:
    
   # Step 1: Checkout repo code
        - name: Checkout code
          uses: actions/checkout@v3
          
   # Step 2: Configure AWS credentials
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
      
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-west-1  

      # Step 3: Log in to Amazon ECR
        - name: Log in to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Set short SHA for tagging
        - name: Set short SHA
          id: vars
          run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

     
        - name: Build and push result image  to ecr
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: result-repo
            IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
          run: |
           docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./result
           docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     # Step 5: Build and push result image
        - name: Build and push vote image to ecr
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: vote-repo
            IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
          run: |
           docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./vote
           docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        - name: Build and push worker image to ecr
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: worker-repo
            IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
          run: |
           docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./worker
           docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG       


    deploy-to-ec2:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
        - name: Checkout Code 
          uses: actions/checkout@v2 

        - name: set up ssh
          uses: webfactory/ssh-agent@v0.5.3
          with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

        - name: copy docker-compose file
          run: scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_IP }}:/home/ubuntu/docker-compose.yaml

        - name: Write .env on the server
          run: |
           ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_IP }} 'cat > /home/ubuntu/.env << "ENVEOF"
            ${{ secrets.EC2_ENV_FILE }}
           ENVEOF
           '
          
        - name: run docker-compose up
          run: ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_IP }} "cd /home/ubuntu && docker compose pull && docker compose up -d"
